<?php

/**
 * @file
 * Test cases for FlexSlider
 *
 * @author Mathew Winstone <mwinstone@coldfrontlabs.ca>
 */


class FlexsliderTestCase extends DrupalWebTestCase {
  protected $admin_user;
  protected $any_user;
  
  public static function getInfo() {
    return array(
      'name' => t('FlexSlider tests'),
      'description' => t('Test the FlexSlider presets, configuration options and permission controls.'),
      'group' => t('FlexSlider'),
    );
  }

  function setUp() {
    parent::setUp('libraries', 'ctools', 'flexslider');
    
    // Create users
    $this->admin_user = $this->drupalCreateUser(array('administer flexslider'));
    $this->any_user = $this->drupalCreateuser(array('access administration pages'));
  }

  function testAdminAccess() {

    // Login as the admin user
    $this->drupalLogin($this->admin_user);
    
    // Load admin page
    $this->drupalGet('admin/config/media/flexslider');
    $this->assertResponse(200, t('Administrative permission allows access to administration page.'));
    
    // Logout as admin user
    $this->drupalLogout();
    
    // Login as any user
    $this->drupalLogin($this->any_user);

    // Attempt to load admin page
    $this->drupalGet('admin/config/media/flexslider');
    $this->assertResponse(403, t('Regular users do not have access to administrative pages.'));
  }
  
  function testOptionSet() {
    
    // Login with admin user
    $this->drupalLogin($this->admin_user);

    // ------------ Test Option Set Add ------------ //
    // Load create form
    $this->drupalGet('admin/config/media/flexslider/add');
    $this->assertResponse(200, t('Administrative user can reach the "Add" form.'));
    
    // Save new optionset
    $optionset = array();
    $optionset['title'] = 'testset';
    $optionset['name'] = 'testset';
    $this->drupalPost('admin/config/media/flexslider/add', $optionset, t('Create new option set'));
    $this->assertResponse(200);
    $this->assertText('Option set testset was created.', t('Successfully saved the new optionset "testset"'));

    // Attempt to save option set of the same name again
    // @todo

    // ------------ Test Option Set Edit ------------ //
    // Attempt to save each option value
    $options = _flexslider_test_options();
    
    foreach($options['valid'] as $testset) {
      $this->drupalPost('admin/config/media/flexslider/edit/default', $testset, t('Save Option Set'));      
      $this->assertResponse(200);
      
      // Test saved values
      // @todo
    }


    
    // ------------ Test Option Set Delete ------------ //
    // Attempt to delete an option set that exists
    // Attemp to delete an option set that doesn't exist
  }
  
}

/**
 * Test configuration options
 *
 * @return array
 *  Returns an array of options to test saving.
 */
function _flexslider_test_options() {
  // Valid option set data
  $valid = array(
    'set1' => array(
      // v2.x options
      'namespace' => 'flex',
      'easing' => 'linear', // @todo add default value
      'direction' => 'horizontal',
      'reverse' => FALSE,  // @todo verify data value
      'smoothHeight' => TRUE, // @todo verify data value
      'startAt' => 0,
      'animationSpeed' => 6000,
      'initDelay' => 0,
      'useCSS' => FALSE,
      'touch' => TRUE,
      'keyboard' => TRUE,
      'multipleKeyboard' => FALSE, // @todo verify data value
      'mousewheel' => FALSE, // requires https://github.com/brandonaaron/jquery-mousewheel @todo add to make file
      'controlsContainer' => '.flex-nav-container', // @todo verify data value
      'sync' => '', // @todo verify data value
      'asNavFor' => '', // @todo verify data value
      'itemWidth' => '', // @todo verify data value
      'itemMargin' => '', // @todo verify data value
      'minItems' => 1, // @todo verify data value
      'maxItems' => 1, // @todo verify data value
      'move' => 0, // @todo verify data value
      'added' => 'function() {}', // @todo verify data value
      'removed' => 'function() {}', // @todo verify data value

      // @todo verify the 1.x options are still valid
      // v1.x options
      'animation' => 'fade',
      //'animationDuration' => 6000, -- replaced by 'animationSpeed'
      //'slidedirection' => 'horizontal', -- replaced by "direction" 
      'slideshow' => TRUE,
      'slideshowSpeed' => 7000,
      'directionNav' => TRUE,
      'controlNav' => TRUE,
      //'keyboardnav' => TRUE, --  replaced by 'keyboard'
      'mousewheel' => FALSE,
      'prevText' => t('Previous'),
      'nextText' => t('Next'),
      'pausePlay' => FALSE,
      'pauseText' => t('Pause'),
      'playText' => t('Play'),
      'randomize' => FALSE,
      //'slidetostart' => 0, // integer value, not boolean --  replace by "startAt"
      'animationLoop' => TRUE,
      'pauseOnAction' => TRUE,
      'pauseOnHover' => TRUE,
      //'controlscontainer' => '.flex-nav-container', -- updated in v2
      'manualControls' => '',
      'startCallback' => 'function() {}',
      'beforeCallback' => 'function() {}',
      'afterCallback' => 'function() {}',
      'endCallback' => 'function() {}',

    ),
    'set2' => array(
      'animation' => 'fade',
      // @todo add more option tests
    ),
    'set3' => array(
      'animation' => 'slide',
    ),
  );
  
  // Invalid edge cases
  $error = array();
  
  return array('valid' => $valid, 'error' => $error);
}