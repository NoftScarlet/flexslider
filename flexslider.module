<?php
/**
 * @file
 * A light-weight, customizable image gallery plugin for Drupal based on jQuery
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\flexslider\Entity\Flexslider;

define("FLEXSLIDER_VERSION", \Drupal::config('flexslider.settings')->get('flexslider_version'));
define("FLEXSLIDER_DEBUG", \Drupal::config('flexslider.settings')->get('flexslider_debug'));

/**
 * Implements hook_libraries_info().
 */
function flexslider_libraries_info() {
  $libraries['flexslider'] = array(
    'name' => 'FlexSlider',
    'vendor url' => 'http://www.woothemes.com/flexslider/',
    'download url' => 'https://github.com/woothemes/FlexSlider',
    'version arguments' => array(
      'file' => 'jquery.flexslider-min.js',
      // jQuery FlexSlider v2.1
      'pattern' => '/jQuery FlexSlider v(\d+\.+\d+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'jquery.flexslider-min.js',
      ),
      'css' => array(
        'flexslider.css',
      ),
    ),
    'integration files' => array(
      'flexslider' => array(
        'css' => array('assets/css/flexslider_img.css'),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_libraries_info_alter().
 */
function flexslider_libraries_info_alter(&$libraries) {
  $debug = \Drupal::config('flexslider.settings')->get('flexslider_debug');
  if ($debug) {
    // Switch to the unminified version of the library
    if (isset($libraries['flexslider'])) {
      $libraries['flexslider']['files']['js'] = array(
        'jquery.flexslider.js',
      );
    }
  }

  // Add support for jQuery Easing module
  if (\Drupal::moduleHandler()->moduleExists('jqeasing')) {
    $libraries['flexslider']['dependencies'][] = 'easing (>=1.3)';
  }
}

/**
 * Implements hook_library().
 *
 * We also define FlexSlider through the core library callbacks
 */
function flexslider_library() {
  $module_path = drupal_get_path('module', 'flexslider');
  $library_path = libraries_get_path('flexslider');
  
  $libraries['flexslider'] = array(
    'title' => 'FlexSlider',
    'website' => 'http://flexslider.woothemes.com',
    'version' => FLEXSLIDER_VERSION,
    'js' => array(
      $library_path . '/jquery.flexslider-min.js' => array(
        'scope' => 'footer',
      ),
    ),
    'css' => array(
      $library_path . '/flexslider.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      $module_path . '/assets/css/flexslider_img.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_library_alter().
 */
function flexslider_library_alter(&$libraries, $module) {
  // Enable debug mode
  if (FLEXSLIDER_DEBUG) {
    if ($module == 'flexslider' and isset($libraries['flexslider'])) {
      $libraries['flexslider']['js'] = array(
        libraries_get_path() . '/jquery.flexslider.js' => array(
          'scope' => 'footer',
        ),
      );
    }
  }
}

/**
 * Implements hook_help().
 */
function flexslider_help($route_name, RouteMatchInterface $route_match) {
  $vendor_link = \Drupal\Core\Link::fromTextAndUrl(t('FlexSlider documentation'), \Drupal\Core\Url::fromUri('http://www.woothemes.com/flexslider/'));
  $vendor_link = $vendor_link->toRenderable();
  $vendor_link['#attributes'] = array('target' => '_new');
  switch ($route_name) {
    case 'help.page.flexslider':
      return
        '<p>'
        . t('An <em>option set</em> defines exactly how a flexslider image gallery looks like on your site. '
          . 'It is s a combination of <a href="@styles">image styles</a> for the various image sizes and FlexSlider library options.', array('@styles' => url('admin/config/media/image-styles'))) . '<br />'
        . t('For a full documentation of all options, refer to the official @docs.', array('@docs' => render($vendor_link)))
        . '</p>';
    case 'entity.flexslider.collection':
        return
            '<p>'
          . t('An <em>option set</em> defines exactly how a flexslider image gallery looks and behaves on your site.') . '<br />'
          . t('For a full documentation of all library options, refer to the official @docs.', array('@docs' => render($vendor_link)))
          . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function flexslider_theme() {
  return array(
    // Flexslider container
    'flexslider' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'file' => 'theme/flexslider.theme.inc',
    ),
    
    // Slide container
    'flexslider_list' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'file' => 'theme/flexslider.theme.inc',
    ),
    
    // Slide item
    'flexslider_list_item' => array(
      'variables' => array('item' => array(), 'settings' => array(), 'caption' => ''),
      'file' => 'theme/flexslider.theme.inc',
    ),
  );
}

/**
 * Fetches all option sets from the database and returns them as an associative array.
 * Suitable as options for select lists.
 *
 * @return array
 *   Array of optionset labels keyed by id
 */
function flexslider_optionset_load_all() {
  $optionsets = Flexslider::loadMultiple();
  $options = array();
  foreach ($optionsets as $name => $optionset) {
    $options[$name] = $optionset->label();
  }

  if (empty($options)) {
    $options[''] = t('No defined option sets');
  }
  return $options;
}

/**
 * Fetches the given option set and returns it as an object or NULL, if no set could be found.
 *
 * @param string $optionset_name
 * @param boolean $fallback
 * @return \Drupal\flexslider\Entity\Flexslider
 */
function flexslider_optionset_load($optionset_name, $fallback = TRUE) {

    // Ensure the optionset is typecast after being loaded from DB
  //_flexslider_typecast_optionset($optionset->options);
  /// return $optionset;
}

/**
 * Checks whether an option set with the given name already exists.
 */
function flexslider_optionset_exists($optionset_name) {
  // @FIXME
// Most CTools APIs have been moved into core.
// 
// @see https://www.drupal.org/node/2164623
// ctools_include('export');

  // @FIXME
// The CTools Export API has been merged with the core entity API.
// 
// @see https://www.drupal.org/developing/api/entity
// $optionset = ctools_export_crud_load('flexslider_optionset', $optionset_name);

  // return isset($optionset->name);
}

/*
 * This function loads the required JavaScripts and settings for a flexslider
 * instance.
 *
 * @param string $id [optional]
 *  ID Attribute for FlexSlider container
 * @param object|strong $optionset [optional]
 *  Option set to load or the machine name of an existing optionset
 */
function flexslider_add($id = NULL, $optionset = NULL) {
  // Check optionset value
  if (is_string($optionset)) {
    $name = $optionset;
    $optionset = Flexslider::load($name);
    if (empty($optionset)) {
      \Drupal::logger('flexslider')->warning('Invalid optionset name supplied to flexslider_add: @name', array('@name' => $name));
      return;
    }
  }

  // Static array to remember which scripts are already attached.
  // @todo not currently in use
  $cache = &drupal_static(__FUNCTION__, array());

  // @todo investigate the best way to cache data loaded from libraries_load()
  libraries_load('flexslider');

  // If the ID or optionset aren't set, it is assumed the settings will be set
  // manually via the calling module/theme
  if (!empty($optionset) && !in_array($optionset->id(), $cache)) {
    $cache[] = $optionset->id();
    $js_setting['optionsets'] = array(
      $optionset->id() => $optionset->getOptions(),
    );
    // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
// 
// 
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_js(array('flexslider' => $js_setting), 'setting');

  }
  
  if (!empty($id)) {
    // JavaScript settings
    $js_settings = array(
      'instances' => array(
        $id => $optionset->name,
      ),
    );
    // @todo add alter hook for optionset
    // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
// 
// 
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_js(array('flexslider' => $js_settings), 'setting');

  }
  // Loader JavaScript
  // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
// 
// 
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_js(drupal_get_path('module', 'flexslider') . '/assets/js/flexslider.load.js', array('type' => 'file', 'scope' => 'footer'));

}

/**
 * Adds the typecasting to the values so that the generated
 * json array keeps the right values
 */
function _flexslider_typecast_optionset(&$options) {
  if (isset($options) && !empty($options)) {
    foreach ($options as $key => $value) {
      switch ($key) {
        case 'namespace':
        case 'selector':
        case 'easing':
        case 'direction':
        case 'controlsContainer':
        case 'sync':
        case 'asNavFor':
        case 'fade':
        case 'prevText':
        case 'nextText':
        case 'pauseText':
        case 'playText':
        case 'manualControls':
          $options[$key] = (string)$value;
          break;
        case 'startAt':
        case 'animationSpeed':
        case 'initDelay':
        case 'itemWidth':
        case 'itemMargin':
        case 'minItems':
        case 'maxItems':
        case 'move':
          $options[$key] = (int)$value;
          break;
        case 'controlNav':
          if ($value == 'thumbnails') {
            $options[$key] = (string)$value;
            break;
          }
        case 'reverse':
        case 'smoothHeight':
        case 'useCSS':
        case 'touch':
        case 'video':
        case 'keyboard':
        case 'multipleKeyboard':
        case 'mouseWheel':
        case 'slideshow':
        case 'directionNav':
        case 'pausePlay':
        case 'randomize':
        case 'thumbCaptions':
        case 'thumbCaptionsBoth':
        case 'animationLoop':
        case 'pauseOnAction':
        case 'pauseOnHover':
          $options[$key] = (boolean)$value;
          break;
      }
    }
  }
}

/**
 * List of all easing methods available from jQuery Easing v1.3
 */
function _flexslider_jqeasing_options() {
  return array(
    "jswing" => "jswing",
    "def" => "def",
    "easeInQuad" => "easeInQuad",
    "easeOutQuad" => "easeOutQuad",
    "easeInOutQuad" => "easeInOutQuad",
    "easeInCubic" => "easeInCubic",
    "easeOutCubic" => "easeOutCubic",
    "easeInOutCubic" => "easeInOutCubic",
    "easeInQuart" => "easeInQuart",
    "easeOutQuart" => "easeOutQuart",
    "easeInOutQuart" => "easeInOutQuart",
    "easeInQuint" => "easeInQuint",
    "easeOutQuint" => "easeOutQuint",
    "easeInOutQuint" => "easeInOutQuint",
    "easeInSine" => "easeInSine",
    "easeOutSine" => "easeOutSine",
    "easeInOutSine" => "easeInOutSine",
    "easeInExpo" => "easeInExpo",
    "easeOutExpo" => "easeOutExpo",
    "easeInOutExpo" => "easeInOutExpo",
    "easeInCirc" => "easeInCirc",
    "easeOutCirc" => "easeOutCirc",
    "easeInOutCirc" => "easeInOutCirc",
    "easeInElastic" => "easeInElastic",
    "easeOutElastic" => "easeOutElastic",
    "easeInOutElastic" => "easeInOutElastic",
    "easeInBack" => "easeInBack",
    "easeOutBack" => "easeOutBack",
    "easeInOutBack" => "easeInOutBack",
    "easeInBounce" => "easeInBounce",
    "easeOutBounce" => "easeOutBounce",
    "easeInOutBounce" => "easeInOutBounce",
  );
}