<?php
/**
 * @file
 * Installation actions for FlexSlider
 */

/**
 * Implements hook_schema().
 */
/*
function flexslider_schema() {
  $schema = array();

  $schema['flexslider_optionset'] = array(
    'description' => 'Store option sets for flexslider instances.',
    'export' => array(
      'key' => 'name',
      'identifier' => 'preset',
      'default hook' => 'flexslider_default_presets',
      'api' => array(
        'owner' => 'flexslider',
        'api' => 'flexslider_default_preset',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'description' => 'The machine-readable option set name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The human-readable title for this option set.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'theme' => array(
        'description' => 'The flexslider theme.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'classic',
      ),
      'imagestyle_normal' => array(
        'description' => 'The image style for normal images.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'flexslider_full',
      ),
      'imagestyle_thumbnail' => array(
        'description' => 'The image style for thumbnail images.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'flexslider_thumbnail',
      ),
      'options' => array(
        'description' => 'The options array.',
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );

  return $schema;
}//*/

/**
 * Implements hook_install().
 *
 * Adds a 'default' option set for fresh installs.
 */
function flexslider_install() {
  // Do nothing for now
}

/**
 * Implements hook_uninstall().
 */
function flexslider_uninstall() {
  $config = \Drupal::config('flexslider');
  $config->clear('debug')->save();
  $config->clear('version')->save();
}

/**
 * Implements hook_requirements().
 */
function flexslider_requirements($phase) {
  $requirements = array();

  // Check to see if the flexslider library is available
  if ($phase == 'runtime') {
    $requirements['flexslider'] = array(
      'title' => t('FlexSlider'),
      // @todo have the version automatically detected
      'description' => t('Version 2.0 installed'),
      'severity' => REQUIREMENT_OK,
    );
    _flexslider_requirements_library_installed($requirements);
  }
  return $requirements;
}

/**
 * Implements hook_update_N().
 *
 * Migrate CTools Exportables into CMI
 */
function flexslider_update_8000() {
  // @todo
}

/**
 * Check if the library is available
 *
 * @param array $requirements
 *  Requirements definition
 */
function _flexslider_requirements_library_installed(&$requirements) {

  $path = libraries_get_path('flexslider');
  $installed = file_exists($path . '/jquery.flexslider-min.js') && file_exists($path . '/jquery.flexslider.js');

  // Check the results of the test
  if (!$installed) {
    $requirements['flexslider']['description'] = t('FlexSlider library not found. Please consult the README.txt for installation instructions.');
    $requirements['flexslider']['severity'] = REQUIREMENT_ERROR;
    $requirements['flexslider']['value'] = t('FlexSlider library not found.');
    return;
  }

  $js = file_exists($path . '/jquery.flexslider-min.js') ? fopen($path . '/jquery.flexslider-min.js', 'r') : fopen($path . '/jquery.flexslider.js', 'r');
  $header = fread($js, 64);
  $matches = array();
  if (preg_match("/ v([0-9]+)\.([0-9]+)/", $header, $matches)) {
    if (!($matches[1] == 2 and $matches[2] >= 0)) {
      $requirements['flexslider']['description'] = t('FlexSlider must be version 2.0 or higher, but lower than version 3.0.  Please consult the README.txt for installation instructions.');
      $requirements['flexslider']['severity'] = REQUIREMENT_WARNING;
      $requirements['flexslider']['value'] = t('Incorrect version detected.');
      return;
    }
    else {
      $version = $matches[1] . "." . $matches[2];
      variable_set('flexslider_version', $version);
      $requirements['flexslider']['description'] = t('Version %version installed', array( '%version' => $version));
      $requirements['flexslider']['value'] = t('FlexSlider library installed.');
      return;
    }
  }
  else {
    $requirements['flexslider']['description'] = t('FlexSlider version could not be determined.  Please consult the README.txt for installation instructions.');
    $requirements['flexslider']['severity'] = REQUIREMENT_WARNING;
    $requirements['flexslider']['value'] = t('Unable to detect version.');
  }
}

// @todo add hook_update_N function to migrate old option set data to new values
